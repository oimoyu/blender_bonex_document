# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2024, oimoyu
# This file is distributed under the same license as the Blender Bonex
# Document package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2024.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Blender Bonex Document\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2024-04-08 09:07+0800\n"
"PO-Revision-Date: 2024-04-08 10:19+0800\n"
"Last-Translator: \n"
"Language-Team: ja <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"Generated-By: Babel 2.14.0\n"
"X-Generator: Poedit 3.4.2\n"

#: ../../source/simulation.rst:2
msgid "Simulation"
msgstr "シミュレーション"

#: ../../source/simulation.rst:10
msgid ""
"**Bake All**: click the button, the physics result will be baked into "
"keyframe. There are 3 process phases. ①.gathering kinematic rigidbody data. ②."
"physx calculating process, if you check the debug option, you can see the "
"progress in the PhysX Visual Debugger. In this process you can press ESC to "
"stop bake. ③. Setting bone keyframe, this is a long progress, you should wait "
"it patiently."
msgstr ""
"**すべてベイク**: ボタンをクリックすると、物理演算結果がキーフレームにベイクさ"
"れます。処理フェーズは3つあります。①kinematic剛体データの収集。②PhysXの計算プロ"
"セス。デバッグオプションをチェックすると、PhysXビジュアルデバッガで進行状況を見"
"ることができます。この過程で ESC キーを押すとベイクを止めることができます。③. "
"ボーンキーフレームの設定、これは長いので気長に待ちましょう。"

#: ../../source/simulation.rst:12
msgid "**Playback simulate**: If enable, simulate during playback."
msgstr "**再生シミュレート**: 有効にすると、再生中にシミュレートされます。"

#: ../../source/simulation.rst:14
msgid ""
"**Set Keyframe Mode**: Blender Setting Keyframe has a big performance issuse. "
"So I provide two way to set keyframe. \"Normal\": set keyframe by advanced "
"API, using more time. \"Fast\": set keyframe by basic api, faster, but it will "
"cause existing keyframes to become linear. \"Fast\" is a better choice if you "
"didn't be setting any keyframes manually on the bones that will be simulated."
msgstr ""
"**キーフレーム モードの設定**: Blender のキーフレーム設定には大きなパフォーマン"
"スの問題があります。 そこで、キーフレームを設定する 2 つの方法を提供します。 "
"「標準」: 高度な API によってキーフレームを設定し、より多くの時間を費やしま"
"す。 「高速」: 基本 API によってキーフレームを設定します。より速くなりますが、"
"既存のキーフレームが線形になります。 シミュレートされるボーンに手動でキーフレー"
"ムを設定していない場合は、「高速」を選択することをお勧めします。"

#: ../../source/simulation.rst:16
msgid ""
"**Bake range**: Set simulation range for baking. If not set bake range will be "
"scene frame range."
msgstr ""
"**ベイク範囲**: ベイクのシミュレーション範囲を設定します。 設定されていない場"
"合、ベイク範囲はシーン フレーム範囲になります。"

#: ../../source/simulation.rst:18
msgid "**Selected Bone Only**: If enable, only selected bones will be simulated."
msgstr ""
"**選択されたボーンのみ**: 有効にすると、選択されたボーンのみがシミュレートされ"
"ます。"

#: ../../source/simulation.rst:20
msgid ""
"**Inherit Linear Velocity**: If enabled, linear velocity is calculated as the "
"initial velocity based on the relative displacements of the two frames "
"preceding the starting simulation frame."
msgstr ""
"**線形速度を継承**: 有効にすると、開始シミュレーション フレームに先行する 2 つ"
"のフレームの相対変位に基づいて、線形速度が初期速度として計算されます。"

#: ../../source/simulation.rst:22
msgid ""
"**Debug**: If enable, simulated info will display in the PhysX Visual "
"Debugger. PhysX Visual Debugger Download: https://developer.nvidia.com/physx-"
"visual-debugger"
msgstr ""
"**デバッグ**: 有効にすると、シミュレートされた情報が PhysX Visual Debugger に表"
"示されます。 PhysX Visual Debuggerのダウンロード: https://developer.nvidia.com/"
"physx-visual-debugger"
